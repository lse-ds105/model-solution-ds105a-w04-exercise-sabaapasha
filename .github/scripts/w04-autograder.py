"""
Move this script to the .github/scripts/ folder of each student-produced W04 repo
"""

import os
import re
import nbformat
import requests
import subprocess

import pandas as pd
from PIL import Image


def image_can_be_opened(image_path):
    try:
        Image.open(image_path)
        return True
    except:
        return False


def check_markdown_file(file_path):
    """Checks a Markdown file for proper formatting."""

    try:
        with open(file_path, "r", encoding='utf-8') as f:
            content = f.read()

        # Check for headings
        has_headings = any(line.startswith("#") for line in content.split("\n"))

        # Check for formatting
        has_formatting = any(
            line.startswith("*") or line.startswith("1.") for line in content.split("\n")
        )

        has_code_blocks = any("`" in line for line in content.split("\n"))
    except:
        has_headings = False
        has_formatting = False
        has_code_blocks = False

    return has_headings, has_formatting, has_code_blocks


def check_jupyter_notebook(file_path):
    """Checks a Jupyter Notebook for headings and code execution."""

    try:
        with open(file_path, "r") as f:
            nb = nbformat.read(f, as_version=4)
        # Check for headings in markdown cells
        has_headings = any(
            any(line.startswith("#") for line in cell["source"].split("\n"))
            for cell in nb["cells"]
            if cell["cell_type"] == "markdown"
        )

        # Check for code cells that run without errors
        code_cells_run = True
        for cell in nb["cells"]:
            if cell["cell_type"] == "code":
                # Try to execute the code
                try:
                    exec(cell["source"])
                except Exception as e:
                    code_cells_run = False
                    break
    except:
        has_headings = False
        code_cells_run = False

    return has_headings, code_cells_run


def generate_report(results):

    df = pd.DataFrame(results)
    print(df)
    print("====" * 12)
    # df = df.T.reset_index()
    df.columns = ["Check", "Status", "Notes"]
    df["Status"] = df["Status"].map({True: "✅ Pass", False: "❌ Fail"})

    with open("FEEDBACK/w04_report.md", "w", encoding="UTF-8") as f:
        f.write(
            f"## W04 Summative Autograder Report\n\n"
            f"This report was automatically generated by the [W04 Summative Autograder script](../.github/scripts/w04-autograder.py).\n\n"
            f"Markers will use this to guide their manual review of your submission.\n\n"
            f"### Automated Checks\n\n"
            f"{df.to_markdown(index=False)}\n\n"
        )


def main():
    """Main function to run all checks."""

    results = []

    # CHECK 1: README.md exists
    if os.path.exists("README.md"):
        check_result = {"Check": "README.md exists", "Status": True, "Notes": ""}
    else:
        check_result = {
            "Check": "README.md exists",
            "Status": False,
            "Notes": "README.md file not found.",
        }

    has_readme = check_result["Status"]

    if has_readme:
        with open("README.md", "r") as f:
            readme_content = f.read()

    results.append(check_result)

    # CHECK 2: There were no TODO comments in the README.md file
    if has_readme:
        if "#TODO" in readme_content:
            check_result = {
                "Check": "No #TODO comments in README.md",
                "Status": False,
                "Notes": "You had some #TODO comments in the README.md file. Those should have been removed.",
            }
        else:
            check_result = {
                "Check": "No #TODO comments in README.md",
                "Status": True,
                "Notes": "No #TODO comments found in the README.md file.",
            }
    else:
        check_result = {
            "Check": "No #TODO comments in README.md",
            "Status": False,
            "Notes": "README.md file not found.",
        }

    results.append(check_result)

    # CHECK 3: There was an 'About Me' section and it was a H2 header
    if has_readme:
        if "## about me" in readme_content.lower():
            check_result = {
                "Check": "About Me section is a H2 header",
                "Status": True,
                "Notes": "You have an 'About Me' section in the README.md file and it is correctly formatted as a H2 header.",
            }
        else:
            check_result = {
                "Check": "About Me section is a H2 header",
                "Status": False,
                "Notes": "You don't have an 'About Me' section in the README.md file or it is not correctly formatted as a H2 header.",
            }
    else:
        check_result = {
            "Check": "About Me section is a H2 header",
            "Status": False,
            "Notes": "README.md file not found.",
        }

    results.append(check_result)

    # CHECK 4: Figures directory exists
    if os.path.exists("figures"):
        check_result = {
            "Check": "Figures directory exists",
            "Status": True,
            "Notes": "",
        }
    else:
        check_result = {
            "Check": "Figures directory exists",
            "Status": False,
            "Notes": "",
        }
    has_figures = check_result["Status"]

    results.append(check_result)

    # CHECK 5: Figure in figures directory
    if has_figures:

        figures_found = []

        if any(
            [image_can_be_opened(f"figures/{file}") for file in os.listdir("figures")]
        ):
            figures_found = [
                f for f in os.listdir("figures") if image_can_be_opened(f"figures/{f}")
            ]
            check_result = {
                "Check": "Valid figure in figures directory",
                "Status": True,
                "Notes": f"Image(s) found in figures/: {figures_found}",
            }
        else:
            check_result = {
                "Check": "Valid figure in figures directory",
                "Status": False,
                "Notes": "No figure found in figures directory.",
            }
    else:
        check_result = {
            "Check": "Valid figure in figures directory",
            "Status": False,
            "Notes": "No figures directory found.",
        }

    results.append(check_result)

    # CHECK 6: Image properly linked in README.md
    if has_figures:
        if figures_found:
            for figure in figures_found:
                if (
                    f"(figures/{figure})" in readme_content
                    or f"./figures/{figure}" in readme_content
                ):
                    check_result = {
                        "Check": "Image properly linked in README.md",
                        "Status": True,
                        "Notes": "You used ![]() correctly to add the image to the README.md file.",
                    }
                else:
                    check_result = {
                        "Check": "Image properly linked in README.md",
                        "Status": False,
                        "Notes": "You probably didn't use the ![]() markdown syntax correctly in the README.md file when linking to your image.",
                    }
        else:
            check_result = {
                "Check": "Image properly linked in README.md",
                "Status": False,
                "Notes": "No figure found in figures directory to link in README.md.",
            }
    else:
        check_result = {
            "Check": "Image properly linked in README.md",
            "Status": False,
            "Notes": "No figures directory found.",
        }

    results.append(check_result)

    # CHECK 7: There were Markdown links in the README other than 'https://lse-dsi.github.io/2024/autumn-term'
    #          That is, checks for []() matches, but importantly, these matches cannot be part of ![]() matches
    if has_readme:

        # Find all markdown links in the README.md file first
        markdown_links = re.findall(r"(?<!!)\[.*?\]\(.*?\)", readme_content)

        # Remove the link to the course website
        markdown_links = [
            link
            for link in markdown_links
            if "https://lse-dsi.github.io/2024/autumn-term" not in link
        ]

        # Extract JUST the link part of the Markdown links
        markdown_links = [
            link.split("(", 1)[1].split(")", 1)[0] for link in markdown_links
        ]

        has_markdown_links = len(markdown_links) > 0

        if has_markdown_links:
            check_result = {
                "Check": "Markdown links in README.md",
                "Status": True,
                "Notes": (
                    "You have used the []() Markdown syntax to create links in the README.md file. "
                    "Are these links valid and working, though?"
                ),
            }
        else:
            check_result = {
                "Check": "Markdown links in README.md",
                "Status": False,
                "Notes": "No Markdown links found in the README.md file.",
            }
    else:
        has_markdown_links = False
        check_result = {
            "Check": "Markdown links in README.md",
            "Status": False,
            "Notes": "README.md file not found.",
        }

    results.append(check_result)

    # CHECK 8: Check for relative paths in the README.md links, reusing the has_markdown_links & markdown_links variables
    if has_readme:
        if has_markdown_links:
            relative_links = [
                link for link in markdown_links if not link.startswith("http")
            ]
            if relative_links:
                check_result = {
                    "Check": "Relative paths in README.md links",
                    "Status": True,
                    "Notes": (
                        "Great! You have used relative paths in the README.md file to link to other files in this repository! "
                        "We hope these links work and they are not links to your image files "
                        "(those should be linked using the ![]() syntax) 😉"
                    ),
                }
            else:
                check_result = {
                    "Check": "Relative paths in README.md links",
                    "Status": False,
                    "Notes": (
                        "Maybe your links are all absolute paths? (those starting with http or https). "
                        "We were hoping your links would point only to files that are part of this repository "
                        "AND that you would use relative paths to link to them."
                    ),
                }
        else:
            check_result = {
                "Check": "Relative paths in README.md links",
                "Status": False,
                "Notes": "No Markdown links found in the README.md file.",
            }
    else:
        check_result = {
            "Check": "Relative paths in README.md links",
            "Status": False,
            "Notes": "README.md file not found.",
        }

    results.append(check_result)

    # # CHECK 9: Links are not broken, right? Let's check that!
    # broken_links = []
    # if has_readme:
    #     if has_markdown_links:
    #         for link in markdown_links:
    #             if link.startswith("http"):
    #                 try:
    #                     response = requests.head(link)
    #                     if response.status_code != 200:
    #                         broken_links.append(link)
    #                 except:
    #                     broken_links.append(link)
    #             else:
    #                 # Check if the local file exists
    #                 file_path = os.path.join(os.path.dirname("README.md"), link)
    #                 if not os.path.exists(file_path):
    #                     broken_links.append(link)

    #         if not broken_links:
    #             check_result = {
    #                 "Check": "Links are not broken",
    #                 "Status": True,
    #                 "Notes": "All links in the README.md file are working.",
    #             }
    #         else:
    #             check_result = {
    #                 "Check": "Links are not broken",
    #                 "Status": False,
    #                 "Notes": (
    #                     f"Broken links found in the README.md file: {broken_links}. "
    #                     "Absolute paths pointing to files inside the repository are also considered broken links."
    #                 ),
    #             }
    #     else:
    #         check_result = {
    #             "Check": "Links are not broken",
    #             "Status": False,
    #             "Notes": "No Markdown links found in the README.md file.",
    #         }
    # else:
    #     check_result = {
    #         "Check": "Links are not broken",
    #         "Status": False,
    #         "Notes": "README.md file not found.",
    #     }

    # results.append(check_result)

    # CHECK 10: There were other markdown files OR Jupyter notebooks somewhere in the repository

    # Make a deep search for markdown files and Jupyter notebooks
    markdown_files = []
    jupyter_notebooks = []

    for root, dirs, files in os.walk("."):
        for file in files:
            file_path = os.path.join(root, file)
            if file.endswith(".md") and file != "README.md" and file != "w04_report.md":
                markdown_files.append(file_path)
            elif file.endswith(".ipynb"):
                jupyter_notebooks.append(file_path)

    has_markdown_files = len(markdown_files) > 0
    has_jupyter_notebooks = len(jupyter_notebooks) > 0

    if has_markdown_files or has_jupyter_notebooks:
        check_result = {
            "Check": "Other markdown files or Jupyter notebooks in the repository",
            "Status": True,
            "Notes": (
                "You have other markdown files or Jupyter notebooks in the repository. "
                "Great job! You are using different file types to document your work. "
            ),
        }
    else:
        check_result = {
            "Check": "Other markdown files or Jupyter notebooks in the repository",
            "Status": False,
            "Notes": "No other markdown files or Jupyter notebooks found in the repository.",
        }

    results.append(check_result)

    # CHECK 11: Did you link to the other markdown files or Jupyter notebooks in the README.md file?

    # if has_readme:
    #     if has_markdown_files or has_jupyter_notebooks:
    #         links_to_other_files = []
    #         for file in markdown_files + jupyter_notebooks:
    #             if (
    #                 f"]({file})" in readme_content
    #                 or f"]({file.split('./')[1]})" in readme_content
    #             ):
    #                 links_to_other_files.append(file)

    #         if links_to_other_files:
    #             check_result = {
    #                 "Check": "README.md contains links to other markdown files or Jupyter notebooks",
    #                 "Status": True,
    #                 "Notes": (
    #                     "You have linked to other markdown files or Jupyter notebooks in the README.md file. "
    #                     "Great job! You are using different file types to document your work and linking to them."
    #                 ),
    #             }
    #         else:
    #             check_result = {
    #                 "Check": "README.md contains links to other markdown files or Jupyter notebooks",
    #                 "Status": False,
    #                 "Notes": (
    #                     "You have other markdown files or Jupyter notebooks in the repository, "
    #                     "but you didn't link to them in the README.md file. "
    #                     "This would have been a great opportunity to show the reader how to navigate your repository."
    #                 ),
    #             }
    #     else:
    #         check_result = {
    #             "Check": "README.md contains links to other markdown files or Jupyter notebooks",
    #             "Status": False,
    #             "Notes": "No other markdown files or Jupyter notebooks found in the repository.",
    #         }
    # else:
    #     check_result = {
    #         "Check": "README.md contains links to other markdown files or Jupyter notebooks",
    #         "Status": False,
    #         "Notes": "README.md file not found.",
    #     }

    # results.append(check_result)

    # CHECK 12: Check for proper Markdown formatting in the other markdown files
    if has_markdown_files:
        for file in markdown_files:
            has_headings, has_formatting, has_code_blocks = check_markdown_file(file)
            if has_headings and has_formatting and has_code_blocks:
                check_result = {
                    "Check": f"(Experimental) Markdown file {file} has proper formatting",
                    "Status": True,
                    "Notes": "The Markdown file has proper formatting.",
                }
            else:
                check_result = {
                    "Check": f"(Experimental) Markdown file {file} has proper formatting",
                    "Status": False,
                    "Notes": (
                        "We looked for signs of headings, text formatting, and code blocks "
                        "in the Markdown file, but we couldn't find anything. "
                        "Maybe we missed something?"
                    ),
                }
            results.append(check_result)

    # CHECK 13: Check for proper Markdown formatting and that code cells run in the Jupyter notebooks
    if has_jupyter_notebooks:
        for file in jupyter_notebooks:
            has_headings, code_cells_run = check_jupyter_notebook(file)
            if has_headings and code_cells_run:
                check_result = {
                    "Check": f"(Experimental) Jupyter Notebook {file} has proper formatting and code",
                    "Status": True,
                    "Notes": "There was a mix of markdown + Python cells in the file and the Python code ran without errors",
                }
            else:
                check_result = {
                    "Check": f"(Experimental) Jupyter Notebook {file} has proper formatting and code",
                    "Status": False,
                    "Notes": (
                        "We looked for signs of Markdown cells AND we tried to check if the Python code runs "
                        "in the Jupyter Notebook."
                        "Our checks failed. Maybe we missed something?"
                    ),
                }
            results.append(check_result)


    generate_report(results)


if __name__ == "__main__":
    os.makedirs("FEEDBACK", exist_ok=True)
    main()
